type Coordinates @model @auth(rules: [{allow: public}]) {
  id: ID!
  latitude: Float!
  longitude: Float!
}

enum RouteStatus {
  PLANNED
  INITIATED
  CHECKING
  IN_TRANSIT
  DONE
  ON_HOLD
  ABORTED
}

type Route @model @auth(rules: [{allow: public}]) {
  id: ID!
  cost: Float
  startTime: AWSTimestamp
  endTime: AWSTimestamp
  status: RouteStatus
  orders: [Order] @hasMany(indexName: "byRoute", fields: ["id"])
  name: String!
  driver: Driver @hasOne
}

enum OrderStatus {
  RECEIVED
  IN_TRANSIT
  DELIVERED
  CHECKED
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  number: String!
  deliveryInstruction: String
  mealsInstruction: String
  status: OrderStatus
  customer: Customer @hasOne
  routeID: ID! @index(name: "byRoute")
  eta: Int
  route: Route @belongsTo
}

type Customer @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  address: String!
  plan: String
  phone: String!
  owner: String
  coordinates: Coordinates @hasOne
}

type Driver @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  email: String!
  phone: String
  carCapacity: Int
  owner: String!
}

type Todo @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
  isComplete: Boolean!
  owner: String!
}
 