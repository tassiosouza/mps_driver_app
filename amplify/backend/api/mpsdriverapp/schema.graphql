type MRoute @model @auth(rules: [{allow: public}]) {
  id: ID!
  cost: Float
  startTime: Float
  endTime: Float
  status: RouteStatus
  driverID: String
  distance: Int
  duration: Int
  location: String
  routePlanName: String
  routeDate: Float
  points: AWSJSON
}

enum RouteStatus {
  PLANNED
  ASSIGNED
  INITIATED
  CHECKING_BAGS
  IN_TRANSIT
  DONE
  CANCELED
  ON_HOLD
  SENDING_WELCOME_MESSAGES
}

enum OrderStatus {
  CREATED
  IN_TRANSIT
  DELIVERED
  CHECKED
  CANCELED
}

enum AssignStatus {
  ASSIGNED
  ASSIGNING
  UNASSIGNED
}

type MOrder @model @auth(rules: [{allow: public}]) {
  id: ID!
  number: String
  deliveryInstruction: String
  mealPlan: String
  status: OrderStatus
  customerName: String
  eta: Int
  assignedRouteID: String
  address: String
  latitude: Float
  longitude: Float
  orderDate: Float
  phone: String
  location: String
  sort: Int
  avatar: String
  subscriptionID: String
  deliveryURL: String
}

type MpsSubscription @model @auth(rules: [{allow: public}]) {
  id: ID!
  number: String!
  deliveryInstruction: String
  mealPlan: String
  subscriptionDate: Float
  address: String
  status: String
  name: String
  email: String
  phone: String
  latitude: Float
  longitude: Float
  avatar: String
  location: String
}

type Driver @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  email: String!
  phone: String
  carCapacity: Int
  owner: String!
  onBoard: Boolean
  status: Boolean
  latitude: Float
  longitude: Float
  assignStatus: AssignStatus
}

type Todo @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
  isComplete: Boolean!
  owner: String!
}
 